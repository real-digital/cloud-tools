// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  metadata: true
//  asset-dir: true
//  restore: true
// sources:
//  testdata/a/pligos.yaml
//  testdata/a/result.yaml
//  testdata/a/schema.yaml
//  testdata/b/pligos.yaml
//  testdata/b/result.yaml
//  testdata/b/schema.yaml
//  testdata/c/pligos.yaml
//  testdata/c/result.yaml
//  testdata/c/schema.yaml

package compiler

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64
	mode os.FileMode
	time time.Time

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return a.mode
}

func (a *asset) ModTime() time.Time {
	return a.time
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"testdata/a/pligos.yaml": &asset{
		name: "pligos.yaml",
		data: "" +
			"\x94\x53\x3b\x8e\xe3\x30\x0c\xed\x75\x0a\x22\xbd\xb3\xde\x54\x59\xb7\x7b\x81\x54\xdb\x2c\xa6\xa0" +
			"\x23\x3a\x11\xe0\x50\x02\x45\x65\x3e\xa7\x1f\x84\x8e\x7f\xc0\x64\x06\x51\x65\x4a\xef\xe3\x47\x51" +
			"\x12\x8b\x52\xe3\x00\x2a\x60\xbc\x50\x03\x67\xd5\xe4\x00\x00\xf4\x3d\x2d\xcb\x14\x45\x1b\xd8\xd7" +
			"\x56\x1c\x23\x2b\x06\x26\x39\xd8\xee\x6e\x57\xd7\xc3\x81\xf6\xb9\x01\x95\x42\x56\x9d\x63\xd6\x41" +
			"\x35\x78\x62\xf5\x5b\x21\xec\x2b\x4f\xd7\xad\xa7\x85\xe5\x49\xd2\x71\x61\x39\x95\x83\xe5\x9f\x87" +
			"\x96\xbf\x9f\xb5\x74\x81\x4f\x42\x39\x2f\xf3\x7a\xea\xb0\xf4\x6a\x64\x62\x6c\x7b\xf2\x0b\x39\x64" +
			"\x8e\x8a\x1a\x22\x1b\xe9\xb6\xba\x18\x1b\x68\x51\x9c\x13\x7c\xfd\x87\x7d\xa1\x87\x7a\xd7\xe9\x74" +
			"\x4d\x3c\x46\xee\xc2\xa9\x88\x09\x3f\x49\x9e\xc1\x85\x4b\x26\xff\x05\xb6\x45\xb9\x61\x3f\x9c\x4b" +
			"\x12\x5b\x7a\x64\xe0\xa9\x0b\x1c\xc6\x5f\xb0\xe6\xa9\xa6\xf1\x1b\x20\xa1\x9e\x1b\xf8\x35\xd7\xf7" +
			"\x09\xd8\xd7\x96\x40\xe9\x4d\xcd\xb2\xc5\x4c\x03\x6b\x6e\xc8\xca\x48\x28\x11\x2a\xf9\xbf\xab\xd8" +
			"\xf0\x7f\x73\x07\x6d\x5e\x0c\x76\xc1\x94\x7e\x04\x8d\x37\xb8\x32\x98\x66\x63\x6a\x41\x05\x16\x3d" +
			"\xcf\x69\x00\xfa\x70\x25\xa6\x9c\x0f\xd6\x94\x95\xc0\xb0\x84\xd0\x87\x6f\x10\xf6\x56\x56\x92\xd5" +
			"\xfc\x3e\xc6\x0d\x9b\xde\xcf\x00\x00\x00\xff\xff",
		size: 854,
		mode: 0644,
		time: time.Unix(1552234071, 161015333),
	},
	"testdata/a/result.yaml": &asset{
		name: "result.yaml",
		data: "" +
			"\xa4\x90\x51\x6e\xc3\x20\x0c\x86\xdf\x39\x85\x2f\x90\x8e\xf5\xa9\xe3\x75\x17\xe8\x15\x9c\xe2\xa4" +
			"\x48\xd4\x46\xc6\xa9\xb4\xdb\x4f\xa1\x49\xba\x4d\x53\xa4\x69\x6f\xf6\x8f\xf9\x3e\xc3\x45\xd8\x30" +
			"\x31\x69\x0d\xae\x83\xa2\xd2\x53\x0d\x0e\x00\x40\x09\x63\x62\xaa\xf5\x3c\x87\x8f\x0c\xe0\x6a\x56" +
			"\xd6\x1a\xa0\xa0\x5d\x03\xbc\x3c\x7b\x51\x0b\x70\xf2\x27\xdf\xa2\x9c\xee\xf4\x1f\x82\xca\x64\xeb" +
			"\x3a\x5f\xaf\x6d\x4b\x9f\xdb\xf4\xf1\xe8\xbd\x5f\xe9\x52\x8d\xf1\x46\x01\x52\x24\xb6\x78\x50\xc2" +
			"\xdc\x45\xba\x1f\x22\xb9\xef\x8a\xa5\xb5\x5c\x03\x98\x4e\xeb\xb1\x7d\x14\x0a\x4d\xd7\x82\x51\xcb" +
			"\x65\xc7\xfb\xfa\x57\xef\xdb\xbe\x77\xd6\xb9\xc4\xa3\x52\x6d\x0f\x47\x66\x31\xb4\x24\xbc\xfc\xc3" +
			"\x20\x12\xa0\x47\x75\x00\xc4\xd8\x67\x8a\x1b\xe5\xe1\x8f\x34\xe0\x94\xcd\x6d\x83\x4a\x85\xd0\x28" +
			"\xbe\x0b\x0f\x69\x9c\xb4\xd1\x66\x58\xf7\x84\xdd\xb0\x94\x5f\x26\x16\xd6\x0f\xf3\x56\x7c\x06\x00" +
			"\x00\xff\xff",
		size: 573,
		mode: 0644,
		time: time.Unix(1552234071, 161015333),
	},
	"testdata/a/schema.yaml": &asset{
		name: "schema.yaml",
		data: "" +
			"\x84\x90\xc1\x52\x84\x30\x10\x44\xef\xf9\x8a\xfe\x8e\x5c\xfd\x81\x3d\x79\x0f\x9b\x5e\x8c\x05\x93" +
			"\xd4\x64\x58\xf5\xef\xad\x04\x16\x64\xb5\xca\x5b\x98\xee\x69\xde\xb4\xe6\xc5\xe8\x1d\x60\x5f\x85" +
			"\x1e\xd5\x34\xc9\xe8\x80\x92\xd5\x3c\x64\x99\xa9\xe9\xea\x80\x6b\x16\x0b\x49\xa8\x97\x27\xc1\xa6" +
			"\xea\x31\xe4\x3c\x39\xe0\x2d\x57\x93\x30\x1f\x39\xae\x68\x1e\x7a\x7c\xe4\x2d\x49\xb2\x94\xc5\x83" +
			"\xf3\xc0\x18\x19\x91\x87\x77\x5e\xcd\xb9\x3d\xbc\x39\x3b\x51\xf5\x98\x43\x29\x8c\xeb\x67\x03\x6a" +
			"\x49\xb5\x19\x80\x29\xdd\x29\xac\xf5\xd2\xd3\x57\xa9\x0b\xca\x10\xd3\x2f\xc5\x25\x19\x95\xb5\x2f" +
			"\x9f\xf0\x00\x4a\x18\x26\xc6\xfd\x82\x20\x92\x2d\x34\xcc\xea\x77\x3c\x0d\x1f\xaf\x61\x5a\xd6\xbf" +
			"\xdf\xd7\xd7\x9f\x47\xdc\xd2\xb8\x68\xdf\xfe\xcf\x69\xfc\xb4\xe6\x79\x90\x3d\x1e\x3f\x9b\xae\x1e" +
			"\xca\xc2\x60\x8c\xc7\xb0\x15\xb4\xe3\x1c\xd1\xfb\xac\xe9\xdb\xd2\xcb\x09\xe8\x94\x75\xcc\x1d\xb6" +
			"\xa2\x9f\xdc\x5b\xfb\x67\xef\x77\x00\x00\x00\xff\xff",
		size: 557,
		mode: 0644,
		time: time.Unix(1552234071, 161015333),
	},
	"testdata/b/pligos.yaml": &asset{
		name: "pligos.yaml",
		data: "" +
			"\x94\x52\xbb\x6e\xc3\x30\x0c\xdc\xf5\x15\x84\x77\x07\x6e\xa6\xd6\x6b\x7f\xa0\x53\x97\x20\x03\x6d" +
			"\xd1\x8e\x00\x47\x12\x28\xca\x7d\x7c\x7d\x61\xa9\x56\x6c\xa0\x41\x11\x6d\x47\xdd\xf1\xf8\x62\x17" +
			"\x85\x5a\x05\x50\x83\xc5\x2b\xb5\x70\x11\xf1\x0a\x00\x40\xbe\xfc\x16\x7a\xc7\xd2\xc2\x73\x93\x40" +
			"\xef\xac\xa0\xb1\xc4\x6f\x29\x7a\x3c\x36\x4d\xfe\x90\x29\xb4\x20\x1c\x29\xa1\x8b\x0b\x92\xb3\x1a" +
			"\x4d\x56\xf4\x81\x09\xa7\x5a\xd3\x7c\xd0\xb4\xb1\x1c\xd9\xf7\x1b\xcb\x02\xb3\xe5\xcb\x5d\xcb\xa7" +
			"\x47\x2d\x95\xb1\x23\x53\x08\xdb\x7e\x35\x0d\x18\x27\x49\x62\xb2\xd8\x4d\xa4\x37\xe9\xd0\x5a\x27" +
			"\x28\xc6\xd9\x24\x5a\xde\xe0\x5c\x0b\x1d\xb2\x52\x8c\x1f\xef\x38\x45\xba\x9b\x6f\x2e\xbf\x7b\x61" +
			"\xef\xec\x60\xc6\xc8\x29\xf1\x83\xe2\x1b\x39\xda\x18\x48\xff\xc1\xed\x90\x17\xee\xb7\x52\x81\x78" +
			"\x36\xfd\x6e\xbf\x79\x2c\x89\x79\xab\x7f\x67\xcc\xe4\x09\x85\xf4\xeb\xae\x4a\x38\x55\xbf\xa4\xea" +
			"\x9c\x68\x57\xf4\xfe\x5f\xd2\x3a\xf0\x9d\x41\x59\x65\xa9\xb8\x86\x74\x87\x05\xe7\x58\xb9\xbd\x35" +
			"\x90\x2e\x63\x99\x9e\xd0\xa7\x24\x72\x87\x81\xb2\x68\x6d\x15\x4e\x55\x6e\xb1\x3a\xab\x9f\x00\x00" +
			"\x00\xff\xff",
		size: 733,
		mode: 0644,
		time: time.Unix(1552234071, 161015333),
	},
	"testdata/b/result.yaml": &asset{
		name: "result.yaml",
		data: "" +
			"\x9c\x90\x41\x6a\xc4\x30\x0c\x45\xf7\x39\x85\x2e\x90\x21\x9d\x55\xeb\x6d\x2f\xd0\x2b\x68\xc6\x4a" +
			"\xc6\xe0\x48\x46\x96\x0b\xbd\x7d\x89\x93\x3a\x29\x84\x16\xc6\xab\x2f\xeb\xe9\xeb\xa3\xe0\x89\xcd" +
			"\xbb\x0e\xe0\x2e\x6c\x18\x98\x34\x2f\x55\x0f\x2a\xc5\xa8\xea\xe5\x3d\xcc\xd2\x8f\x3e\xb0\x1f\xa2" +
			"\xe6\xe0\x7a\x1d\x86\xa1\x35\x1f\x92\x8d\x71\x26\x07\xab\xf9\x45\x09\x63\xef\xe9\xf3\xe2\xa9\x41" +
			"\xa9\x0e\xbe\xee\x53\x16\xb3\x03\xd3\xb2\x23\xf6\x95\xc8\xd5\xc5\xdb\xd7\xa4\xe9\xfe\x67\x86\x97" +
			"\x67\x32\xbc\xfd\x9f\x61\x59\xdc\x01\x04\x9e\x94\xf2\x76\x12\x64\x16\x43\x0b\xc2\xed\x46\xa3\x88" +
			"\x83\x1b\x6a\x2d\x89\xf1\x16\xc9\x1f\xfc\xd6\x3c\x9e\x46\x2c\xd1\xba\x5f\xb8\x52\x22\x34\xf2\xef" +
			"\xc2\x63\x98\x8a\x56\xdf\xd5\xb6\x3f\x72\x33\xa6\x74\x4a\x6d\xae\x27\x49\x9a\xfc\x0e\x00\x00\xff" +
			"\xff",
		size: 490,
		mode: 0644,
		time: time.Unix(1552234071, 161015333),
	},
	"testdata/b/schema.yaml": &asset{
		name: "schema.yaml",
		data: "" +
			"\x7c\x50\x4d\x56\xc6\x20\x0c\xdc\xe7\x14\x39\x07\x5b\x2f\xe0\xca\x3d\x85\x58\xf1\xb5\x09\x2f\xa4" +
			"\x9f\x7a\x7b\x1f\x7c\x14\x6c\x17\xee\x20\xf3\x93\xc9\xa8\x1c\x46\x0e\x10\xed\x27\x93\xc3\x62\x9a" +
			"\x78\x05\xc4\x2c\x6a\x0e\xf9\xd8\x49\x53\x00\xc4\x20\x6c\x3e\x31\xe9\xeb\x0d\xb0\xad\x38\x5c\x44" +
			"\x36\x40\xfc\x90\x62\xec\xf7\xe9\x03\x43\x56\x57\xb4\x5d\xc5\xe1\xee\x73\xa6\xf8\xfc\x02\x24\x5e" +
			"\x95\x4a\xa9\x84\x8b\x16\x91\xd8\x2f\x1b\xc5\x61\xef\x99\xc5\xbc\x25\xe1\xe2\x50\x96\x4f\x0a\x06" +
			"\xa0\xfe\xeb\xcd\x6f\x07\x35\x83\xc7\xf3\x85\xb4\x2f\x14\x23\xc5\xc1\x0a\xc2\xef\x69\x3d\xb4\xa9" +
			"\xff\x65\x16\xd2\x47\x0a\xad\x92\x33\xd9\xf9\xf8\x5b\x43\x71\xa8\x94\xc9\x1b\xc5\x39\xac\x37\x8e" +
			"\x38\xd3\x7a\xcc\x2a\xde\x45\x2f\x97\x40\x17\xaf\x39\x07\xec\x5d\xdd\xd8\xbd\xc0\x2b\xb7\x75\x4d" +
			"\xdf\x56\x93\x9f\x47\xcc\x0c\x5d\xd2\x01\xf8\x0d\x00\x00\xff\xff",
		size: 503,
		mode: 0644,
		time: time.Unix(1552234071, 161015333),
	},
	"testdata/c/pligos.yaml": &asset{
		name: "pligos.yaml",
		data: "" +
			"\x4a\xce\xcf\x4b\xcb\x4c\x2f\x2d\x4a\x2c\xc9\xcc\xcf\xb3\xe2\x52\x50\xd0\x55\xc8\x4b\xcc\x4d\xb5" +
			"\x52\x80\x48\x38\x72\x29\x28\x28\x28\x94\x25\xe6\x94\xa6\x16\x5b\x81\xd9\x0a\x0a\x89\x56\x0a\x89" +
			"\x18\x0a\x9d\xb0\x28\x4c\xb2\x52\x48\xe2\xe2\x4a\xce\xcf\x2b\x49\xad\x28\x01\x8b\x26\x25\x16\xa7" +
			"\x42\x64\x51\xec\x2d\xb6\x52\x88\x86\xda\xa7\x03\x33\x2f\x96\x0b\x10\x00\x00\xff\xff",
		size: 155,
		mode: 0644,
		time: time.Unix(1612805466, 282806746),
	},
	"testdata/c/result.yaml": &asset{
		name: "result.yaml",
		data: "" +
			"\x4a\xb4\x52\x48\xe4\x4a\xb2\x52\x48\xe2\x02\x04\x00\x00\xff\xff",
		size: 10,
		mode: 0644,
		time: time.Unix(1612805042, 118799735),
	},
	"testdata/c/schema.yaml": &asset{
		name: "schema.yaml",
		data: "" +
			"\x54\xcb\xc1\x0d\x80\x30\x08\x05\xd0\x3b\x53\x30\x47\xb7\xa1\xf0\x35\x35\x0a\xa6\x52\xe3\xf8\xc6" +
			"\x9b\xbd\xbf\xa7\xe1\x4b\x5b\x47\x97\x6c\xe1\x85\x98\x6f\xd9\x07\xae\xc2\x38\x2a\xcc\x60\x1c\x75" +
			"\x83\x26\x91\x86\x27\x9e\xfc\xcc\x94\xfe\xb6\xe3\x84\x24\x6c\x16\xf4\x06\x00\x00\xff\xff",
		size: 101,
		mode: 0644,
		time: time.Unix(1612804974, 978416979),
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"testdata": bintree{
		"a": bintree{
			"pligos.yaml": bintree{},
			"result.yaml": bintree{},
			"schema.yaml": bintree{},
		},
		"b": bintree{
			"pligos.yaml": bintree{},
			"result.yaml": bintree{},
			"schema.yaml": bintree{},
		},
		"c": bintree{
			"pligos.yaml": bintree{},
			"result.yaml": bintree{},
			"schema.yaml": bintree{},
		},
	},
}
